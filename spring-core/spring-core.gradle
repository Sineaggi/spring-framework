import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.springframework.build.shadow.ShadowSource

plugins {
	id 'me.champeau.mrjar'
}

description = "Spring Core"

apply plugin: "kotlin"
apply plugin: "kotlinx-serialization"

multiRelease {
	targetVersions 17, 21
}

def javapoetVersion = "1.13.0"
def objenesisVersion = "3.3"

configurations {
	java21Api.extendsFrom(api)
	java21Implementation.extendsFrom(implementation)
	javapoet
	objenesis
	graalvm
}

task javapoetRepackJar(type: ShadowJar) {
	archiveBaseName = 'spring-javapoet-repack'
	archiveVersion = javapoetVersion
	configurations = [project.configurations.javapoet]
	relocate('com.squareup.javapoet', 'org.springframework.javapoet')
}

task javapoetSource(type: ShadowSource) {
	configurations = [project.configurations.javapoet]
	relocate('com.squareup.javapoet', 'org.springframework.javapoet')
	outputDirectory = file("build/shadow-source/javapoet")
}

task javapoetSourceJar(type: Jar) {
	archiveBaseName = 'spring-javapoet-repack'
	archiveVersion = javapoetVersion
	archiveClassifier = 'sources'
	from javapoetSource
}

task objenesisRepackJar(type: ShadowJar) {
	archiveBaseName = 'spring-objenesis-repack'
	archiveVersion = objenesisVersion
	configurations = [project.configurations.objenesis]
	relocate('org.objenesis', 'org.springframework.objenesis')
}

task objenesisSource(type: ShadowSource) {
	configurations = [project.configurations.objenesis]
	relocate('org.objenesis', 'org.springframework.objenesis')
	outputDirectory = file("build/shadow-source/objenesis")
}

task objenesisSourceJar(type: Jar) {
	archiveBaseName = 'spring-objenesis-repack'
	archiveVersion = objenesisVersion
	archiveClassifier = 'sources'
	from objenesisSource
}

dependencies {
	javapoet("com.squareup:javapoet:${javapoetVersion}@jar")
	objenesis("org.objenesis:objenesis:${objenesisVersion}@jar")
	api(files(javapoetRepackJar))
	api(files(objenesisRepackJar))
	api(project(":spring-jcl"))
	compileOnly("io.projectreactor.tools:blockhound")
	compileOnly("org.graalvm.sdk:graal-sdk")
	optional("io.micrometer:context-propagation")
	optional("io.netty:netty-buffer")
	optional("io.netty:netty5-buffer")
	optional("io.projectreactor:reactor-core")
	optional("io.reactivex.rxjava3:rxjava")
	optional("io.smallrye.reactive:mutiny")
	optional("net.sf.jopt-simple:jopt-simple")
	optional("org.aspectj:aspectjweaver")
	optional("org.jetbrains.kotlin:kotlin-reflect")
	optional("org.jetbrains.kotlin:kotlin-stdlib")
	optional("org.jetbrains.kotlinx:kotlinx-coroutines-core")
	optional("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
	testFixturesImplementation("com.google.code.findbugs:jsr305")
	testFixturesImplementation("io.projectreactor:reactor-test")
	testFixturesImplementation("org.assertj:assertj-core")
	testFixturesImplementation("org.junit.platform:junit-platform-launcher")
	testFixturesImplementation("org.junit.jupiter:junit-jupiter-api")
	testFixturesImplementation("org.junit.jupiter:junit-jupiter-params")
	testFixturesImplementation("org.xmlunit:xmlunit-assertj")
	testImplementation("com.fasterxml.jackson.core:jackson-databind")
	testImplementation("com.fasterxml.woodstox:woodstox-core")
	testImplementation("com.google.code.findbugs:jsr305")
	testImplementation("com.squareup.okhttp3:mockwebserver")
	testImplementation("io.projectreactor:reactor-test")
	testImplementation("io.projectreactor.tools:blockhound")
	testImplementation("jakarta.annotation:jakarta.annotation-api")
	testImplementation("jakarta.xml.bind:jakarta.xml.bind-api")
	testImplementation("org.jetbrains.kotlinx:kotlinx-serialization-json")
	testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-reactor")
	testImplementation("org.skyscreamer:jsonassert")
	testImplementation("org.xmlunit:xmlunit-assertj")
	testImplementation("org.xmlunit:xmlunit-matchers")
}

jar {
	manifest.attributes["Dependencies"] = "jdk.unsupported,org.jboss.vfs" // for WildFly (Objenesis and VfsUtils)

	dependsOn javapoetRepackJar
	from(zipTree(javapoetRepackJar.archiveFile)) {
		include "org/springframework/javapoet/**"
	}

	dependsOn objenesisRepackJar
	from(zipTree(objenesisRepackJar.archiveFile)) {
		include "org/springframework/objenesis/**"
	}
}

tasks.named('compileJava', JavaCompile) {
	// options.compilerArgs.addAll(['--add-modules', 'spring.objenesis.repack'])
	//options.compilerArgs = ['--add-exports', 'org.springframework.objenesis.instantiator=ALL-UNNAMED']
	//options.compilerArgs = ['--add-exports', 'spring.objenesis.repack/org.springframework.objenesis.instantiator=spring.core',
	//						'--add-exports', 'spring.objenesis.repack/org.springframework.objenesis.strategy=spring.core']
	//println(objenesisRepackJar.archiveFile.get())
	//File.pathSeparator
	options.compilerArgs = [
			//'--patch-module', 'spring.objenesis.repack=spring-objenesis-repack-3.3.jar',
			//'--add-modules', 'spring.javapoet.repack',
			'--patch-module', "spring.core=${[objenesisRepackJar.archiveFile.get(), javapoetRepackJar.archiveFile.get()].join(File.pathSeparator)}",
			'--add-exports', 'org.yaml.snakeyaml/org.yaml.snakeyaml.inspector=spring.beans',
			//'--patch-module', 'spring.javapoet.repack=spring.core',
			//'--add-reads', 'spring.javapoet.repack=spring.core',
			//'--patch-module', 'spring.core=C:\\Users\\Clayton\\Source\\spring-framework\\spring-core\\src\\main\\java',
			//'--module-path', 'C:\\Users\\Clayton\\Source\\spring-framework\\spring-core\\build\\libs\\spring-javapoet-repack-1.13.0.jar;C:\\Users\\Clayton\\Source\\spring-framework\\spring-core\\build\\libs\\spring-objenesis-repack-3.3.jar;C:\\Users\\Clayton\\Source\\spring-framework\\spring-jcl\\build\\libs\\spring-jcl-6.1.0-SNAPSHOT.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.projectreactor.tools\\blockhound\\1.0.8.RELEASE\\e0dd72a1e2bc8e6a4e9f5ea3732a583695d9f0b6\\blockhound-1.0.8.RELEASE.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.graalvm.sdk\\graal-sdk\\22.3.1\\c2c1e3495b04729abbe717173558cfe3cc8bf6f8\\graal-sdk-22.3.1.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\net.sf.jopt-simple\\jopt-simple\\6.0-alpha-3\\2ab1a73e1e22d2b73469362a0908a98644b681d\\jopt-simple-6.0-alpha-3.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.aspectj\\aspectjweaver\\1.9.19\\afbffb1210239fbba5cad73093c5b216d515838f\\aspectjweaver-1.9.19.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.jetbrains.kotlin\\kotlin-reflect\\1.9.0\\2891f552979d4bf4d4ec516acb9df769fb62dbe9\\kotlin-reflect-1.9.0.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.jetbrains.kotlinx\\kotlinx-coroutines-reactive\\1.7.2\\a7e7e80b20cf1b4e13051ec36ae179bbd0bbc565\\kotlinx-coroutines-reactive-1.7.2.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.jetbrains.kotlinx\\kotlinx-coroutines-core-jvm\\1.7.2\\27cb5db69aeef59d8cc2a2cc2be4200f26091e72\\kotlinx-coroutines-core-jvm-1.7.2.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.jetbrains.kotlinx\\kotlinx-coroutines-reactor\\1.7.2\\58f94932d588533791784239f5d6a2757fb57a33\\kotlinx-coroutines-reactor-1.7.2.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.jetbrains.kotlin\\kotlin-stdlib-jdk8\\1.9.0\\e000bd084353d84c9e888f6fb341dc1f5b79d948\\kotlin-stdlib-jdk8-1.9.0.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.jetbrains.kotlin\\kotlin-stdlib-jdk7\\1.9.0\\f320478990d05e0cfaadd74f9619fd6027adbf37\\kotlin-stdlib-jdk7-1.9.0.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.jetbrains.kotlin\\kotlin-stdlib\\1.9.0\\8ee15ef0c67dc83d874f412d84378d7f0eb50b63\\kotlin-stdlib-1.9.0.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.projectreactor\\reactor-core\\3.6.0-M1\\8979013c254bda70cba5be60656cea451becc415\\reactor-core-3.6.0-M1.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.reactivex.rxjava3\\rxjava\\3.1.6\\fd824db2008535f59f2ac0c7bfe8d49fb7193e0\\rxjava-3.1.6.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.smallrye.reactive\\mutiny\\1.9.0\\1898430937b8babab0c98d685b26c7672422546b\\mutiny-1.9.0.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.netty\\netty-buffer\\4.1.95.Final\\e4c48277bd1976b6cd6dc193fe6fccc0bee87b7d\\netty-buffer-4.1.95.Final.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.netty\\netty5-buffer\\5.0.0.Alpha5\\b155d511ca60399a710bea408d4c89da4a179608\\netty5-buffer-5.0.0.Alpha5.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.jetbrains\\annotations\\23.0.0\\8cc20c07506ec18e0834947b84a864bfc094484e\\annotations-23.0.0.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.netty\\netty-common\\4.1.95.Final\\58c510d99df2b1abbcba4849d98b05affae0a96b\\netty-common-4.1.95.Final.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.netty\\netty5-common\\5.0.0.Alpha5\\e262e3f1bca572e7d061cd959b2d357bba1bd711\\netty5-common-5.0.0.Alpha5.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\org.reactivestreams\\reactive-streams\\1.0.4\\3864a1320d97d7b045f729a326e1e077661f31b7\\reactive-streams-1.0.4.jar;C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\io.smallrye.common\\smallrye-common-annotation\\1.13.0\\80c0b5cf5a2a255b14d8a16a5424b57ab72bcacb\\smallrye-common-annotation-1.13.0.jar',
			//'--patch-module', 'java.xml.ws.annotation=C:\\Users\\Clayton\\.gradle\\caches\\modules-2\\files-2.1\\com.google.code.findbugs\\jsr305\\3.0.2\\25ea2e8b0c338a877313bd4672d3fe056ea78f0d\\jsr305-3.0.2.jar'
					]
	//options.compilerArgs = ['--add-reads', 'org.springframework.objenesis.instantiator=ALL-UNNAMED']
	//options.compilerArgs = ['--patch-module', 'org.springframework.objenesis.instantiator=ALL-UNNAMED']
}

test {
	// Make sure the classes dir is used on the test classpath (required by ResourceTests).
	// When test fixtures are involved, the JAR is used by default.
	classpath = sourceSets.main.output.classesDirs + files(sourceSets.main.output.resourcesDir) + classpath - files(jar.archiveFile)

	// Ensure that BlockHound tests run on JDK 13+. For details, see:
	// https://github.com/reactor/BlockHound/issues/33
	jvmArgs += [
		"-XX:+AllowRedefinitionToAddDeleteMethods"
	]
}

sourcesJar {
	dependsOn javapoetSourceJar
	dependsOn objenesisSourceJar
	from javapoetSource
	from objenesisSource
}

eclipse {
	synchronizationTasks javapoetSourceJar, objenesisSourceJar
	classpath {
		file {
			whenMerged {
				def pattern = ~/\/spring-\w+-repack-/
				entries.forEach {
					if (pattern.matcher(it.path).find()) {
						def sourcesJar = it.path.replace('.jar', '-sources.jar')
						it.sourcePath = fileReference(file(sourcesJar))
					}
				}
			}
		}
	}
}

tasks['eclipse'].dependsOn(javapoetRepackJar, javapoetSourceJar, objenesisRepackJar, objenesisSourceJar)
